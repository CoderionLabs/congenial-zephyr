// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node.proto
#ifndef GRPC_node_2eproto__INCLUDED
#define GRPC_node_2eproto__INCLUDED

#include "node.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace node {

// Interface exported by the server.
class Node final {
 public:
  static constexpr char const* service_full_name() {
    return "node.Node";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // A simple RPC.
    //
    // Restarts all services and generates new keys for a new round
    virtual ::grpc::Status NewRound(::grpc::ClientContext* context, const ::node::MsgReq& request, ::node::MsgReq* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::node::MsgReq>> AsyncNewRound(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::node::MsgReq>>(AsyncNewRoundRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::node::MsgReq>> PrepareAsyncNewRound(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::node::MsgReq>>(PrepareAsyncNewRoundRaw(context, request, cq));
    }
    // A server-to-client streaming RPC.
    // server sends messages and the client request them
    // Obtains the Messages available.  Results are
    // streamed rather than returned at once
    std::unique_ptr< ::grpc::ClientReaderInterface< ::node::Msg>> DumpMessages(::grpc::ClientContext* context, const ::node::MsgReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::node::Msg>>(DumpMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::node::Msg>> AsyncDumpMessages(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::node::Msg>>(AsyncDumpMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::node::Msg>> PrepareAsyncDumpMessages(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::node::Msg>>(PrepareAsyncDumpMessagesRaw(context, request, cq));
    }
    // A client-to-server streaming RPC.
    //
    // Send messages to the server
    std::unique_ptr< ::grpc::ClientWriterInterface< ::node::Msg>> PutMessages(::grpc::ClientContext* context, ::node::MsgReq* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::node::Msg>>(PutMessagesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::node::Msg>> AsyncPutMessages(::grpc::ClientContext* context, ::node::MsgReq* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::node::Msg>>(AsyncPutMessagesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::node::Msg>> PrepareAsyncPutMessages(::grpc::ClientContext* context, ::node::MsgReq* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::node::Msg>>(PrepareAsyncPutMessagesRaw(context, response, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // A simple RPC.
      //
      // Restarts all services and generates new keys for a new round
      virtual void NewRound(::grpc::ClientContext* context, const ::node::MsgReq* request, ::node::MsgReq* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewRound(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::node::MsgReq* response, std::function<void(::grpc::Status)>) = 0;
      // A server-to-client streaming RPC.
      // server sends messages and the client request them
      // Obtains the Messages available.  Results are
      // streamed rather than returned at once
      virtual void DumpMessages(::grpc::ClientContext* context, ::node::MsgReq* request, ::grpc::experimental::ClientReadReactor< ::node::Msg>* reactor) = 0;
      // A client-to-server streaming RPC.
      //
      // Send messages to the server
      virtual void PutMessages(::grpc::ClientContext* context, ::node::MsgReq* response, ::grpc::experimental::ClientWriteReactor< ::node::Msg>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::node::MsgReq>* AsyncNewRoundRaw(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::node::MsgReq>* PrepareAsyncNewRoundRaw(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::node::Msg>* DumpMessagesRaw(::grpc::ClientContext* context, const ::node::MsgReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::node::Msg>* AsyncDumpMessagesRaw(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::node::Msg>* PrepareAsyncDumpMessagesRaw(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::node::Msg>* PutMessagesRaw(::grpc::ClientContext* context, ::node::MsgReq* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::node::Msg>* AsyncPutMessagesRaw(::grpc::ClientContext* context, ::node::MsgReq* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::node::Msg>* PrepareAsyncPutMessagesRaw(::grpc::ClientContext* context, ::node::MsgReq* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status NewRound(::grpc::ClientContext* context, const ::node::MsgReq& request, ::node::MsgReq* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::node::MsgReq>> AsyncNewRound(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::node::MsgReq>>(AsyncNewRoundRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::node::MsgReq>> PrepareAsyncNewRound(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::node::MsgReq>>(PrepareAsyncNewRoundRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::node::Msg>> DumpMessages(::grpc::ClientContext* context, const ::node::MsgReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::node::Msg>>(DumpMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::node::Msg>> AsyncDumpMessages(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::node::Msg>>(AsyncDumpMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::node::Msg>> PrepareAsyncDumpMessages(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::node::Msg>>(PrepareAsyncDumpMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::node::Msg>> PutMessages(::grpc::ClientContext* context, ::node::MsgReq* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::node::Msg>>(PutMessagesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::node::Msg>> AsyncPutMessages(::grpc::ClientContext* context, ::node::MsgReq* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::node::Msg>>(AsyncPutMessagesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::node::Msg>> PrepareAsyncPutMessages(::grpc::ClientContext* context, ::node::MsgReq* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::node::Msg>>(PrepareAsyncPutMessagesRaw(context, response, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void NewRound(::grpc::ClientContext* context, const ::node::MsgReq* request, ::node::MsgReq* response, std::function<void(::grpc::Status)>) override;
      void NewRound(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::node::MsgReq* response, std::function<void(::grpc::Status)>) override;
      void DumpMessages(::grpc::ClientContext* context, ::node::MsgReq* request, ::grpc::experimental::ClientReadReactor< ::node::Msg>* reactor) override;
      void PutMessages(::grpc::ClientContext* context, ::node::MsgReq* response, ::grpc::experimental::ClientWriteReactor< ::node::Msg>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::node::MsgReq>* AsyncNewRoundRaw(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::node::MsgReq>* PrepareAsyncNewRoundRaw(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::node::Msg>* DumpMessagesRaw(::grpc::ClientContext* context, const ::node::MsgReq& request) override;
    ::grpc::ClientAsyncReader< ::node::Msg>* AsyncDumpMessagesRaw(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::node::Msg>* PrepareAsyncDumpMessagesRaw(::grpc::ClientContext* context, const ::node::MsgReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::node::Msg>* PutMessagesRaw(::grpc::ClientContext* context, ::node::MsgReq* response) override;
    ::grpc::ClientAsyncWriter< ::node::Msg>* AsyncPutMessagesRaw(::grpc::ClientContext* context, ::node::MsgReq* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::node::Msg>* PrepareAsyncPutMessagesRaw(::grpc::ClientContext* context, ::node::MsgReq* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_NewRound_;
    const ::grpc::internal::RpcMethod rpcmethod_DumpMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_PutMessages_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // A simple RPC.
    //
    // Restarts all services and generates new keys for a new round
    virtual ::grpc::Status NewRound(::grpc::ServerContext* context, const ::node::MsgReq* request, ::node::MsgReq* response);
    // A server-to-client streaming RPC.
    // server sends messages and the client request them
    // Obtains the Messages available.  Results are
    // streamed rather than returned at once
    virtual ::grpc::Status DumpMessages(::grpc::ServerContext* context, const ::node::MsgReq* request, ::grpc::ServerWriter< ::node::Msg>* writer);
    // A client-to-server streaming RPC.
    //
    // Send messages to the server
    virtual ::grpc::Status PutMessages(::grpc::ServerContext* context, ::grpc::ServerReader< ::node::Msg>* reader, ::node::MsgReq* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_NewRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewRound() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_NewRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRound(::grpc::ServerContext* context, const ::node::MsgReq* request, ::node::MsgReq* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewRound(::grpc::ServerContext* context, ::node::MsgReq* request, ::grpc::ServerAsyncResponseWriter< ::node::MsgReq>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpMessages() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DumpMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpMessages(::grpc::ServerContext* context, const ::node::MsgReq* request, ::grpc::ServerWriter< ::node::Msg>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpMessages(::grpc::ServerContext* context, ::node::MsgReq* request, ::grpc::ServerAsyncWriter< ::node::Msg>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PutMessages() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PutMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutMessages(::grpc::ServerContext* context, ::grpc::ServerReader< ::node::Msg>* reader, ::node::MsgReq* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutMessages(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::node::MsgReq, ::node::Msg>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_NewRound<WithAsyncMethod_DumpMessages<WithAsyncMethod_PutMessages<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NewRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_NewRound() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::node::MsgReq, ::node::MsgReq>(
          [this](::grpc::ServerContext* context,
                 const ::node::MsgReq* request,
                 ::node::MsgReq* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->NewRound(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_NewRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRound(::grpc::ServerContext* context, const ::node::MsgReq* request, ::node::MsgReq* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NewRound(::grpc::ServerContext* context, const ::node::MsgReq* request, ::node::MsgReq* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DumpMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DumpMessages() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::node::MsgReq, ::node::Msg>(
          [this] { return this->DumpMessages(); }));
    }
    ~ExperimentalWithCallbackMethod_DumpMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpMessages(::grpc::ServerContext* context, const ::node::MsgReq* request, ::grpc::ServerWriter< ::node::Msg>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::node::MsgReq, ::node::Msg>* DumpMessages() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::node::MsgReq, ::node::Msg>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PutMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PutMessages() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackClientStreamingHandler< ::node::Msg, ::node::MsgReq>(
          [this] { return this->PutMessages(); }));
    }
    ~ExperimentalWithCallbackMethod_PutMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutMessages(::grpc::ServerContext* context, ::grpc::ServerReader< ::node::Msg>* reader, ::node::MsgReq* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::node::Msg, ::node::MsgReq>* PutMessages() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::node::Msg, ::node::MsgReq>;}
  };
  typedef ExperimentalWithCallbackMethod_NewRound<ExperimentalWithCallbackMethod_DumpMessages<ExperimentalWithCallbackMethod_PutMessages<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_NewRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewRound() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_NewRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRound(::grpc::ServerContext* context, const ::node::MsgReq* request, ::node::MsgReq* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpMessages() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DumpMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpMessages(::grpc::ServerContext* context, const ::node::MsgReq* request, ::grpc::ServerWriter< ::node::Msg>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PutMessages() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PutMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutMessages(::grpc::ServerContext* context, ::grpc::ServerReader< ::node::Msg>* reader, ::node::MsgReq* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_NewRound() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_NewRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRound(::grpc::ServerContext* context, const ::node::MsgReq* request, ::node::MsgReq* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewRound(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DumpMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DumpMessages() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DumpMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpMessages(::grpc::ServerContext* context, const ::node::MsgReq* request, ::grpc::ServerWriter< ::node::Msg>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PutMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PutMessages() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PutMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutMessages(::grpc::ServerContext* context, ::grpc::ServerReader< ::node::Msg>* reader, ::node::MsgReq* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutMessages(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NewRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_NewRound() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->NewRound(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_NewRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRound(::grpc::ServerContext* context, const ::node::MsgReq* request, ::node::MsgReq* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void NewRound(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DumpMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DumpMessages() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->DumpMessages(); }));
    }
    ~ExperimentalWithRawCallbackMethod_DumpMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpMessages(::grpc::ServerContext* context, const ::node::MsgReq* request, ::grpc::ServerWriter< ::node::Msg>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* DumpMessages() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PutMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PutMessages() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->PutMessages(); }));
    }
    ~ExperimentalWithRawCallbackMethod_PutMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutMessages(::grpc::ServerContext* context, ::grpc::ServerReader< ::node::Msg>* reader, ::node::MsgReq* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* PutMessages() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewRound : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewRound() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::node::MsgReq, ::node::MsgReq>(std::bind(&WithStreamedUnaryMethod_NewRound<BaseClass>::StreamedNewRound, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewRound() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewRound(::grpc::ServerContext* context, const ::node::MsgReq* request, ::node::MsgReq* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewRound(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::node::MsgReq,::node::MsgReq>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_NewRound<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_DumpMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_DumpMessages() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::node::MsgReq, ::node::Msg>(std::bind(&WithSplitStreamingMethod_DumpMessages<BaseClass>::StreamedDumpMessages, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_DumpMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpMessages(::grpc::ServerContext* context, const ::node::MsgReq* request, ::grpc::ServerWriter< ::node::Msg>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDumpMessages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::node::MsgReq,::node::Msg>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_DumpMessages<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_NewRound<WithSplitStreamingMethod_DumpMessages<Service > > StreamedService;
};

}  // namespace node


#endif  // GRPC_node_2eproto__INCLUDED
